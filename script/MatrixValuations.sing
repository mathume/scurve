// USE: GetTable(): rufe auf Singular ../MatrixValuations.sing;
LIB "general.lib";
LIB "poly.lib";
LIB "matrix.lib";
LIB "../../lib/singularcurve.lib";

ring QT = 0, T, dp;

proc Min(matrix M){
	
	number minOrd = 1000000;
	number currOrd = minOrd;
	
	for(int i=1; i<= nrows(M); i++){
		for(int j=1; j<= ncols(M); j++){
			currOrd = leadcoef(M[i,j]);
			if(currOrd < minOrd){
				minOrd = currOrd;
			}
		}
	}
	return(minOrd);
}	

int kmax=8;
int Nmax=8;
//kmax=7;
//Nmax=7;
matrix Mins[kmax][Nmax];

proc GetTable(){
	for(int N=1; N<= Nmax; N++){
		for(int k=1; k<=kmax; k++){
			execute(read(string("valuationAtPoleOrder", N, "k", k, ".mat")));
			execute(string("def M = vpM", N, "k", k, ";"));
			Mins[N,k] = Min(M);
		}
	}
}

proc basicLatexTable(){
	string s;
	s = string(s,"\\begin{tabular}{c|");
	for(int N=1; N<=Nmax; N++){
		s = string(s, "c");
	}
	s = string(s,"}");
	s = string(s,"(N,k)");
	for(int k=1; k<=kmax; k++){
		s = string( s, "&", k);
	}
	s = string(s, "\\\\");
	s = string(s,"\\hline");
	for(int k=1; k<=kmax; k++){
		s = string(s,k);
		for(int N=1; N<=Nmax; N++){
			s = string(s,"&", Mins[N,k]);
		}
		s = string(s,"\\\\");
	}
	s = string(s,"\\end{tabular}");

	return(s);
}
