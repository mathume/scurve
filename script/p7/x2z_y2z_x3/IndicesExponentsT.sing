proc IndicesExponentsPhis(intvec base_exponent, int N, int q, int t){
   def inv2 = inverseI(2,q);
   int nalpha = inv2[2];
   int alpha = inv2[1];
   def inv3 = inverseI(3,q);
   int nbeta = inv3[2];
   int beta = inv3[1];
   int nalphabeta = (nalpha*nbeta*q + 2*nalpha - 3*nbeta) div 6;
	
   int e0 = base_exponent[1];
   int e1 = base_exponent[2];
   int e2 = base_exponent[3];
   int upmostbound = q*N - t;
   list indices;
   list exponents;
   list phiexps;
   for(int i = 1; i<=N; i++){
      indices = insert(indices, list());
      exponents = insert(exponents, list());
      phiexps = insert(phiexps, list());
   }
   
   string defi0 = "int i0 = t0;";
   string defi1 = "int i1 = alpha*(e1 + 1) + q*t1;";
   string defi2 = "int i2 = beta*(2*i0 + e0 + 1) + q*t2;";
   string defi3 = "int i3 = beta*(i0 + i1 + e2 + 1) + q*t3;";

   int t0 = 0; 
   execute(defi0);      

   while(i0 <= upmostbound){

      int t1 = ceilquot(-(alpha)*(e1 + 1),q); 
      execute(defi1);
      
      while(i0 + i1 <= upmostbound){

         int t2 = ceilquot(-(beta)*(2*i0 + e0 + 1), q);
         execute(defi2);

         while(i0 + i1 + i2 <= upmostbound){

                  for(int j = 0; j<N; j++){
                     int t3 = j + 1 - (nbeta*(t0 + t) + t1 + t2 + nalphabeta*(e1 + 1) + beta*t1);
                     execute(defi3);

                     if(0 <= i3){

                        intvec index = i0,i1,i2,i3;
                        indices[j+1] = insert(indices[j+1], index);


                        int exp_x = nbeta*(2*t0 + e0 + 1) + 3*t2 - 1;
                        int exp_y = nalpha*(e1 + 1) + 2*t1 - 1;
                        int exp_z = nbeta*(i0 + i1 + e2 + 1) + 3*t3 - 1;
                        intvec exponent = exp_x,exp_y,exp_z;
                        exponents[j+1] = insert(exponents[j+1], exponent);
                        
                        phiexps[j+1] = insert(phiexps[j+1], i3);

                     }/*end if*/
                  }/*end for*/

		t2++;
		execute(defi2);

               }/*end while*/

            t1++;
            execute(defi1);

     }/*end while*/

         t0++;
         execute(defi0);

  }/*end while*/

      return(list(indices, exponents, phiexps));
}/*end proc*/
